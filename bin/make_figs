#! /usr/bin/env python

import os, sys
import subprocess
import argparse

from observesim.output import *
from observesim.cumulative_plots import *
from observesim.stats import quickSummary
from observesim.animateSurvey import CountFramesAllSky


def str2bool(v):
    if isinstance(v, bool):
        return v
    if v.lower() in ('yes', 'true', 't', 'y', '1'):
        return True
    elif v.lower() in ('no', 'false', 'f', 'n', '0'):
        return False
    else:
        raise argparse.ArgumentTypeError('Boolean value expected.')


if __name__ == "__main__":
    usage = "make_figs"
    description = "Post processing for observesim, make figs and webpage"
    parser = argparse.ArgumentParser(description=description, usage=usage)
    parser.add_argument("-b", "--base", dest="base", type=str,
                        required=False, help="output FITS base name",
                        default=None)
    parser.add_argument("-r", "--rsbase", dest="rs_base", type=str,
                        required=False, help="location of rs files if not specified in env",
                        default=None)
    parser.add_argument("-p", "--plan", dest="plan", type=str,
                        required=True, help="design plan",
                        default='plan-0')
    parser.add_argument("-v", "--version", dest="version", type=str,
                        required=False, help="use versioned directory for output",
                        default=None)
    parser.add_argument("-c", "--count", dest="count", action="store_true",
                        help="redo post-processing file creation, adds 15+ min")
    parser.add_argument("-a", "--all", dest="all", action="store_true",
                        help="redo all plots, adds 15+ min")
    parser.add_argument("-w", "--w", dest="web", action="store_true",
                        help="regenerate webpage only")

    args = parser.parse_args()
    base = args.base
    plan = args.plan
    version = args.version
    rs_base = args.rs_base
    recount = args.count
    draw_all = args.all
    web = args.web
    slow = False

    if version is None:
        version = plan

    if base is None:
        base = os.getenv("OBSERVESIM_OUTPUT_BASE")

    if rs_base is None:
        rs_base = os.getenv('OBSERVING_PLAN_DIR') + "/"

    assert base is not None, "must specify result base"
    assert rs_base is not None, "must specify roboscheduler result base"

    # print("drawing old figs for {}".format(plan))
    # doHist(base, rs_base, plan, version=version, loc="lco")
    # doHist(base, rs_base, plan, version=version, loc="apo")
    # quickSummary(base, plan, rs_base, version=version)
    # spiders_area_for_program_time(base, rs_base, plan, version=version, loc="lco")
    # spiders_area_for_program_time(base, rs_base, plan, version=version, loc="apo")
    # cumulativePlot(base, plan, rs_base, version=version, loc="apo")
    # cumulativePlot(base, plan, rs_base, version=version, loc="lco")
    # runAllCumulativeEpochs(base, plan, version=version)
    # cumulativeWebpage(base, plan, version=version)
    # cartonCoverageByYearMaps(base, plan, rs_base, version=version)
    # cartonCoverageCumulative(base, plan, version=version,
    #                           cartons=["bhm_aqmes_bonus_faint", "bhm_csc_boss"])
    # sys.exit(0)

    if web:
        writeWebPage(base, rs_base, plan, version=version)
        sys.exit(0)

    if recount:
        print("post processing for {}".format(plan))
        countFields(base, rs_base, plan, version=version, loc="apo", N=0)
        countFields(base, rs_base, plan, version=version, loc="lco", N=0)

    if draw_all:
        print("drawing cumulativePlot for {}".format(plan))
        cumulativePlot(base, plan, rs_base, version=version, loc="lco")
        cumulativePlot(base, plan, rs_base, version=version, loc="apo")
        spiders_area_for_program_time(base, rs_base, plan, version=version, loc="lco")
        spiders_area_for_program_time(base, rs_base, plan, version=version, loc="apo")

        quickSummary(base, plan, rs_base, version=version)

        print("drawing old figs for {}".format(plan))
        doHist(base, rs_base, plan, version=version, loc="lco")
        doHist(base, rs_base, plan, version=version, loc="apo")

    if slow:
        cartonCoverageByYearMaps(base, plan, rs_base, version=version)

    print("creating target metrics for {}".format(plan))
    plotTargMetric(base, rs_base, plan, version=version, reqs_file=None)

    # now makes mp4 file from frames in FramesForMP4 dir
    if draw_all:
        movieFrameDir = CountFramesAllSky(base, plan, version=version)
        os.chdir(movieFrameDir)
        subprocess.call('ffmpeg -r 10 -i frame%03d.png -vcodec mpeg4 -y sdss5_sim.mp4', shell=True)

    print("writing webpage for {}".format(plan))

    writeWebPage(base, rs_base, plan, version=version)

    print("finished!")
