#!/usr/bin/env python
# encoding: utf-8

from __future__ import division
from __future__ import print_function
from __future__ import absolute_import

# Perform an SDSS-V simulation

import os
import warnings
import argparse
import time
import numpy as np
import fitsio
from astropy.utils.exceptions import ErfaWarning
import observesim.weather
import roboscheduler.scheduler
import observesim.observe
from observesim import simulation
from observesim.output import countFields, cumulativePlot,\
                              spiders_area_for_program_time, doHist


def runSim(args):
    """ run a simulation
    """
    # ###################
    # make sure this starts a clean slate every run!
    # ###################
    idx, base, plan, version, observatory, schedule, redo_exp, check = args

    time.sleep(idx)  # hopefully that avoids read conflicts?
    print("running sim ", idx)

    sim = simulation.Simulation(plan, observatory, idx=idx, schedule=schedule, redo_exp=redo_exp)

    startTime = time.time()
    # Loop through nights
    with warnings.catch_warnings():
        warnings.simplefilter("ignore", category=ErfaWarning)
        for mjd in sim.scheduler.mjds:
            # uncomment to do a quick check
            if mjd > 59600 and check:
                continue
            sim.observeMJD(mjd)
    print("skipped for physical obstructions", sim.hit_lims)
    print(f"REDO: apg {sim.redo_apg} r {sim.redo_r} b {sim.redo_b}")
    endTime = time.time()

    # with open("{base}weather_tracking_{idx}.dat".format(base=base, idx=idx), "w") as df:
    #     print("mjd, length, observed", file=df)
    #     for m, o in weather_used.items():
    #         print("{}, {}, {}".format(m, o["length"], o["observed"]), file=df)

    print("{} completed in {}".format(idx, endTime-startTime))

    outobstemplate = "{base}{plan}-{observatory}-observations-{idx}.fits"
    outobsfile = outobstemplate.format(base=base, observatory=observatory,
                                       plan=plan, idx=idx)
    fitsio.write(outobsfile, sim.scheduler.observations.toarray(),
                 clobber=True)

    outobstemplate = "{base}{plan}-{observatory}-fields-{idx}.fits"
    outobsfile = outobstemplate.format(base=base, observatory=observatory,
                                       plan=plan, idx=idx)
    fitsio.write(outobsfile, sim.scheduler.fields.toarray(),
                 clobber=True)

    outobstemplate = "{base}{plan}-{observatory}-lst-{idx}.fits"
    outobsfile = outobstemplate.format(base=base, observatory=observatory,
                                       plan=plan, idx=idx)
    fitsio.write(outobsfile, sim.lstToArray(),
                 clobber=True)

    outobstemplate = "{base}{plan}-{observatory}-slews-{idx}.fits"
    outobsfile = outobstemplate.format(base=base, observatory=observatory,
                                       plan=plan, idx=idx)
    fitsio.write(outobsfile, sim.slewsToArray(),
                 clobber=True)

    if check:
        return None

    # get the env vars for now so I don't have to rewrite the whole thing
    rs_base = os.getenv('OBSERVING_PLAN_DIR') + "/"
    base = os.getenv("OBSERVESIM_OUTPUT_BASE")

    countFields(base, rs_base, plan, version=version, loc=observatory, N=0)
    cumulativePlot(base, plan, version=version, loc=observatory)
    spiders_area_for_program_time(base, rs_base, plan, version=version, loc=observatory)
    doHist(base, rs_base, plan, version=version, loc=observatory)

# Read arguments
usage = "sdss5_simulate"
description = "Simulate the SDSS-V schedule"
parser = argparse.ArgumentParser(description=description, usage=usage)
parser.add_argument("-b", "--base", dest="base", type=str,
                    required=False, help="output FITS base name",
                    default=None)
parser.add_argument("-p", "--plan", dest="plan", type=str,
                    required=False, help="design plan",
                    default='plan-0')
parser.add_argument("-t", "--telescope", dest="telescope", type=str,
                    required=False, help="telescope ('apo' or 'lco')",
                    default='apo')
parser.add_argument("-n", "--number", dest="number", type=int,
                    required=False, help="number of runs",
                    default=1)
parser.add_argument("-m", "--multi", dest="multi", type=int,
                    required=False, help="number of processes to use",
                    default=-1)
parser.add_argument("-v", "--version", dest="version", type=str,
                    required=False, help="use versioned directory for output",
                    default=None)
parser.add_argument("-s", "--schedule", dest="schedule", type=str,
                    required=False, help="master schedule to use",
                    default="maximal_v2")
parser.add_argument("-r", "--redo", dest="redo_exp", action="store_true",
                    help="redo exposures if snr below threshold")
parser.add_argument("-c", "--check", dest="check", action="store_true",
                    help="do minimal sim to check changes")
args = parser.parse_args()
base = args.base
plan = args.plan
observatory = args.telescope
number = args.number
multi = args.multi
version = args.version
schedule = args.schedule
redo_exp = args.redo_exp
check = args.check

if base is None:
    base = os.getenv("OBSERVESIM_OUTPUT_BASE")

assert base is not None, "must specify result base"

if version is None:
    version = plan
base = os.path.join(base, version)
try:
    os.makedirs(base)
except:
    pass
base += "/"

if multi == -1:
    for i in range(number):
        runSim((i, base, plan, version, observatory, schedule, redo_exp, check))

else:
    assert multi > 1, "must use more than 1 process for multi argument"
    from multiprocessing import Pool

    pool = Pool(multi)

    result = pool.map(runSim, ((i, base, plan, version, observatory, schedule, redo_exp, check) for i in range(number)))

    pool.close()
    pool.join()
    pool.terminate()
